// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/14/2024 03:00:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FourBitParityCheckerEven
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FourBitParityCheckerEven_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] hex_digit;
// wires                                               
wire segment_a;
wire segment_b;
wire segment_c;
wire segment_d;
wire segment_e;
wire segment_f;
wire segment_g;

// assign statements (if any)                          
FourBitParityCheckerEven i1 (
// port map - connection between master ports and signals/registers   
	.hex_digit(hex_digit),
	.segment_a(segment_a),
	.segment_b(segment_b),
	.segment_c(segment_c),
	.segment_d(segment_d),
	.segment_e(segment_e),
	.segment_f(segment_f),
	.segment_g(segment_g)
);
initial 
begin 
#1000000 $finish;
end 
// hex_digit[ 3 ]
initial
begin
	hex_digit[3] = 1'b1;
	# 50000;
	repeat(9)
	begin
		hex_digit[3] = 1'b0;
		hex_digit[3] = #50000 1'b1;
		# 50000;
	end
	hex_digit[3] = 1'b0;
end 
// hex_digit[ 2 ]
always
begin
	hex_digit[2] = 1'b0;
	hex_digit[2] = #100000 1'b1;
	#100000;
end 
// hex_digit[ 1 ]
initial
begin
	repeat(2)
	begin
		hex_digit[1] = 1'b0;
		hex_digit[1] = #200000 1'b1;
		# 200000;
	end
	hex_digit[1] = 1'b0;
end 
// hex_digit[ 0 ]
initial
begin
	hex_digit[0] = 1'b0;
	hex_digit[0] = #400000 1'b1;
	hex_digit[0] = #400000 1'b0;
end 
endmodule

