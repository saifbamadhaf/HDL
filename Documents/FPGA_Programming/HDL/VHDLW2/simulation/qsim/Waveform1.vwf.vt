// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/14/2024 12:10:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ThreeBitAdder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ThreeBitAdder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a0;
reg a1;
reg a2;
reg b0;
reg b1;
reg b2;
reg cin;
// wires                                               
wire cout;
wire sum0;
wire sum1;
wire sum2;

// assign statements (if any)                          
ThreeBitAdder i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.cin(cin),
	.cout(cout),
	.sum0(sum0),
	.sum1(sum1),
	.sum2(sum2)
);
initial 
begin 
#1000000 $finish;
end 

// a0
always
begin
	a0 = 1'b0;
	a0 = #20000 1'b1;
	#20000;
end 

// a1
initial
begin
	repeat(12)
	begin
		a1 = 1'b0;
		a1 = #40000 1'b1;
		# 40000;
	end
	a1 = 1'b0;
end 

// a2
initial
begin
	repeat(6)
	begin
		a2 = 1'b0;
		a2 = #80000 1'b1;
		# 80000;
	end
	a2 = 1'b0;
end 

// b0
initial
begin
	repeat(3)
	begin
		b0 = 1'b0;
		b0 = #160000 1'b1;
		# 160000;
	end
	b0 = 1'b0;
end 

// b1
initial
begin
	repeat(2)
	begin
		b1 = 1'b0;
		b1 = #240000 1'b1;
		# 240000;
	end
	b1 = 1'b0;
end 

// b2
initial
begin
	b2 = 1'b0;
	b2 = #480000 1'b1;
	b2 = #480000 1'b0;
end 

// cin
initial
begin
	cin = 1'b0;
end 
endmodule

