// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/24/2024 03:36:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Four2OneMultiplexer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Four2OneMultiplexer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
reg S0;
reg S1;
// wires                                               
wire Y;

// assign statements (if any)                          
Four2OneMultiplexer i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.S0(S0),
	.S1(S1),
	.Y(Y)
);
initial 
begin 
#1000000 $finish;
end 

// A
always
begin
	A = 1'b0;
	A = #50000 1'b1;
	#50000;
end 

// B
always
begin
	B = 1'b0;
	B = #100000 1'b1;
	#100000;
end 

// C
initial
begin
	repeat(2)
	begin
		C = 1'b0;
		C = #200000 1'b1;
		# 200000;
	end
	C = 1'b0;
end 

// D
initial
begin
	D = 1'b0;
	D = #400000 1'b1;
	D = #400000 1'b0;
end 

// S0
always
begin
	S0 = 1'b0;
	S0 = #100000 1'b1;
	#100000;
end 

// S1
initial
begin
	repeat(2)
	begin
		S1 = 1'b0;
		S1 = #200000 1'b1;
		# 200000;
	end
	S1 = 1'b0;
end 
endmodule

